/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakeReceiverInterface extends ethers.utils.Interface {
  functions: {
    "customMessage(address)": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "postDepositHook(address,uint256)": FunctionFragment;
    "prevSender()": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "unstake(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "customMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postDepositHook",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prevSender",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "customMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postDepositHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prevSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {};
}

export class StakeReceiver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakeReceiverInterface;

  functions: {
    customMessage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "customMessage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    postDepositHook(
      sender: string,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "postDepositHook(address,uint256)"(
      sender: string,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    prevSender(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "prevSender()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    unstake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  customMessage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "customMessage(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onTokenTransfer(
    sender: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onTokenTransfer(address,uint256,bytes)"(
    sender: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  postDepositHook(
    sender: string,
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "postDepositHook(address,uint256)"(
    sender: string,
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  prevSender(overrides?: CallOverrides): Promise<string>;

  "prevSender()"(overrides?: CallOverrides): Promise<string>;

  stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstake(uint256,address)"(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    customMessage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "customMessage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    postDepositHook(
      sender: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "postDepositHook(address,uint256)"(
      sender: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    prevSender(overrides?: CallOverrides): Promise<string>;

    "prevSender()"(overrides?: CallOverrides): Promise<string>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    customMessage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "customMessage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    postDepositHook(
      sender: string,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "postDepositHook(address,uint256)"(
      sender: string,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    prevSender(overrides?: CallOverrides): Promise<BigNumber>;

    "prevSender()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    customMessage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "customMessage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    postDepositHook(
      sender: string,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "postDepositHook(address,uint256)"(
      sender: string,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    prevSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevSender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
